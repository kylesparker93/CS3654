print("Hello World!")
welcome <- "Hello World"
welcome
1+2
total <- 1+2
total
y <- c(2,-1,7,0,1)
x*y #Coordinate by coordinate product
x%*%y #Dot product
x
sum.1 <- x+1
sum.1
y <- c(2,-1,7,0,1)
x
#######################################################################
#                 Data Structures and Manipulation
#######################################################################
getwd()
setwd("C:\\Users\\Denisa\\Google Drive\\Fall14\\Data Analytics\\Notes\\Lect2")
# 1. Object creation:
#a. Expression
3+3
exp(2)
?exp
help(exp)
2*3
10/4
log(1)
2^3
sqrt(2)
#b. Assignment
a <- 3+3
b <- exp(2)
c=2*3
d=(10/4)^2
x <- Y <- 2
y
b
c
d
ls() # Lists all the elemnts of the workspace
#rm() removes element from the workspace
rm(a) #removes object from workspace;
#Logical operators
x == 2 #(vs. x = 2)
x != 2
x < 2
x > 1
a1
a3 <- (a1 | a2)     #or
# 2. Vectors
# Sequences.
vec1=1:10  #the colon operator
vec1
vec2=1:-10
vec2
vec3=seq(0,5,by=.5)
length(vec3)
vec3
vec4=seq(0,5,length=15)
vec4
a1 <-  x == 2
# Vectors with no pattern
A1 #why do we get an error here?
#Expression
a2 <- (a1 & (Y >2)) #and
x <= 2
c(1,2,3,4,5)
c(2,-1,7)
#Assignment
y <- c(2,-1,7,0,1)
#Vectors of characters
Sebastian = "crab")
bol <- c(TRUE, TRUE, FALSE)
bol
#repeating values
rep1=rep(1,5)
rep1
x <- c(1,2,3,4,5)
pets
char <- c("aa","bb", "cc", "dd")
rep2=rep("a",4)
length(y)
pets <- c(Bolt = "dog", Garfield = "cat",
summary(mariatal.status)
summary(custData.mariatal.status)
summary(custData.marital.status)
summary(marital.status)
install.packages("ggplot2")
library(ggplot2)
help(package=ggplot2)
read.xml("cfb20130831.xml")
xml.read("cfb20130831.xml")
require(XML)
data <- XMLParse("cfb20130831.xml")
package.install("XML")
install.packae("XML")
install.package("XML")
data <- xmlTreeParse("cfb20130831.xml")
install.packages("XML")
data <- xmlTreeParse("cfb20130831.xml")
data <- xmlInternalTreeParse("cfb20130831.xml")
library("XML")
data <- xmlInternalTreeParse("cfb20130831.xml")
data <- xmlTreeParse("cfb20130831.xml")
setwd("D:\\Kyle\\Dropbox\\CS\\CS3654\\R\\HW2")
data <- xmlTreeParse("cfb20130831.xml")
data <- xmlTreeParse("cfb20130831")
data <- xmlTreeParse("cfb20130831",useInternal=TRUE)
data <- xmlTreeParse("cfb20130831.xml",useInternal=TRUE)
data <- xmlToDataFrame("cfb20130831.xml")
url<- "http://www.repole.com/sun4cast/stats/cfb20130907.xml"
myData <- xmlToDataFrame(url)
View(myData)
getwd()
setwd("C:\\Users\\Kyle\\Dropbox\\CS\\CS3654\\R\\Inclass3")
#reload the insurance data (new version of the file)
load("exampleData1.rData")
#Data Transformations
#to allow meaning
#Convert Continuous to Discrete
#For insurance customer data, create age categories
brks <- c(0,25,65,Inf)
custdata$age.range <- cut(custdata$age,
breaks = brks, include.lowest = T)
summary(custdata$age.range)
#Normalize age
summary(custdata$age)
meanage <- mean(custdata$age)
custdata$age.normalized <- custdata$age/meanage
summary(custdata$age.normalized)
#Rescaling age
stdage <- sd(custdata$age)
meanage
stdage
summary(custdata$age.normalized)
hist(custdata$age.normalized, breaks = 7)
hist(custdata$age, breaks = 7)
#Log Transformations
hist(custdata$Income)
hist(log10(custdata$Income))
#Sampling data
#First generate an additional column with random numbers
custdata$gp <- runif(dim(custdata)[1])
#Suppose you want 20% of your dataset to be in the training set
#20% of gp values are below 0.20 and 80% of the values are above 0.20.
testSet <- subset(custdata, custdata$gp <= 0.2)
trainingSet <- subset(custdata, custdata$gp > 0.2)
189/1000
#this works when each customer has its own row in the dataset
#So split dataset according to values of gp. (percentages will be approximate)
811/1000
#between 0 and 1
#and 80% in the test set.
custdata$age.normalized <- (custdata$age-meanage)/stdage
#Extracting a reproducible training and testing set
head(custdata$gp)
merge(custdata, medianincome)
mergedData <- merge(custdata, medianincome)
View(mergedData)
View(mergedData)
scaledData <- scale(mergedData$income, SCALE=mergedData$Median.Income)
scaledData <- scale(mergedData$income, scale=mergedData$Median.Income)
mergedData$norm.income <- scale(mergedData$income, scale=mergedData$Median.Income)
mergedData$norm.income <- (mergedData$income-mergedData$Median.Income)/sd(mergedData$income)
View(mergedData)
summary(mergedData$norm.income)
testSet2 <- subset(custdata, custdata$gp <= 0.7)
trainingSet2 <- subset(custdata, custdata$gp > 0.7)
testSet2 <- subset(mergeddata, custdata$gp <= 0.7)
trainingSet2 <- subset(mergeddata, custdata$gp > 0.7)
testSet2 <- subset(mergedData, custdata$gp <= 0.7)
trainingSet2 <- subset(mergedData, custdata$gp > 0.7)
setwd("D:\\Kyle\\Dropbox\\CS\\CS3654\\R\\HW3")
setwd("C:\\Users\\Kyle\\Dropbox\\CS\\CS3654\\R\\HW3")
install.packages("XML")
library("XML")
url<- "http://www.repole.com/sun4cast/stats/cfb20130907.xml"
myData <- xmlToDataFrame(url)
url<- "http://www.repole.com/sun4cast/stats/cfb20130907.xml"
myData <- xmlToDataFrame(url)
View(myData)
setwd("C:\\Users\\Kyle\\Dropbox\\CS\\CS3654\\R\\HW3")
cfb <- read.csv("data/cfb2013stats.csv")
cfb <- read.csv("cfb2013stats.csv")
summary(cfb)
View(cfb)
summary(cfb$Line)
summary(cfb$Site)
summary(cfb)
saveRDS(cfb, "cfb2013.rData")
install.packages("ggplot2")
library("ggplot2")
ggplot(cfb, aes(x=RushYdsOff+PassYdsOff,y=ScoreOff)) +
geom_point() +
ylim(0,200000) +
theme_bw() +
ggtitle("Scatterplot of Points versus Total Offense")
ggplot(cfb, aes(x=RushYdsOff+PassYdsOff,y=ScoreOff)) +
geom_point() +
ylim(0,100) +
theme_bw() +
ggtitle("Scatterplot of Points versus Total Offense")
ggplot(cfb) +
geom_bar(aes(x="Number of teams", y=(RushYdsOff+PassYdsOff)>300)
geom_bar(aes(x="Number of teams", y=(RushYdsOff+PassYdsOff)>300))
ggplot(cfb) +
geom_bar(aes(x="Number of teams", y=(RushYdsOff+PassYdsOff)>300))
?geom_bar
geom_bar(aes(y=(RushYdsOff+PassYdsOff)>300))
ggplot(cfb) +
geom_bar(aes(y=(RushYdsOff+PassYdsOff)>300))
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>300))
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>350))
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>400))
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>400)) +
xlab("Over 400 yards") + ylab("Number of occurences") +
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>400)) +
xlab("Over 400 yards") + ylab("Number of occurences") +
?geom_bar
xlab("Over 400 yards") + ylab("Number of occurences")
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>400)) +
xlab("Over 400 yards") + ylab("Number of occurences")
?ggplot
pie <- ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x = (ScoreOff>ScoreDef), fill = factor(cyl))) +
geom_bar(width = 1)
pie <- ggplot(cfb, aes(x = (ScoreOff>ScoreDef), fill = factor(cyl))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x = factor(1), fill = factor(cyl))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(mtcars, aes(x = factor(1)) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
ggplot(cfb, aes(x=RushYdsOff+PassYdsOff,y=ScoreOff)) +
geom_point() +
ylim(0,100) +
theme_bw() +
ggtitle("Scatterplot of Points versus Total Offense")
ggplot(cfb) +
geom_bar(aes(x=(RushYdsOff+PassYdsOff)>400)) +
xlab("Over 400 yards") + ylab("Number of occurences")
qplot(PassYdsOff, ScoreOff, data=cfb, geom=c("point", "smooth"),
method="lm", formula=y~x,
main="Regression of Points on Passing Yards",
xlab="Points", ylab="Passing Yards")
qplot(ScoreOff>ScoreDef, Site==H, data=cfb, geom=c("point", "smooth"),
method="lm", formula=y~x,
main="Regression of Points on Passing Yards",
xlab="Points", ylab="Passing Yards")
qplot(ScoreOff>ScoreDef, Site=="H", data=cfb, geom=c("point", "smooth"),
method="lm", formula=y~x,
main="Regression of Points on Passing Yards",
xlab="Points", ylab="Passing Yards")
cfb$TotalOffOff = cfb$PassYdsOff + cfb$RushYdsOff
cfb$TotalOffDef = cfb$PassYdsDef + cfb$RushYdsDef

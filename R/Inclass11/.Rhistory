print("Hello World!")
welcome <- "Hello World"
welcome
1+2
total <- 1+2
total
y <- c(2,-1,7,0,1)
x*y #Coordinate by coordinate product
x%*%y #Dot product
x
sum.1 <- x+1
sum.1
y <- c(2,-1,7,0,1)
x
#######################################################################
#                 Data Structures and Manipulation
#######################################################################
getwd()
setwd("C:\\Users\\Denisa\\Google Drive\\Fall14\\Data Analytics\\Notes\\Lect2")
# 1. Object creation:
#a. Expression
3+3
exp(2)
?exp
help(exp)
2*3
10/4
log(1)
2^3
sqrt(2)
#b. Assignment
a <- 3+3
b <- exp(2)
c=2*3
d=(10/4)^2
x <- Y <- 2
y
b
c
d
ls() # Lists all the elemnts of the workspace
#rm() removes element from the workspace
rm(a) #removes object from workspace;
#Logical operators
x == 2 #(vs. x = 2)
x != 2
x < 2
x > 1
a1
a3 <- (a1 | a2)     #or
# 2. Vectors
# Sequences.
vec1=1:10  #the colon operator
vec1
vec2=1:-10
vec2
vec3=seq(0,5,by=.5)
length(vec3)
vec3
vec4=seq(0,5,length=15)
vec4
a1 <-  x == 2
# Vectors with no pattern
A1 #why do we get an error here?
#Expression
a2 <- (a1 & (Y >2)) #and
x <= 2
c(1,2,3,4,5)
c(2,-1,7)
#Assignment
y <- c(2,-1,7,0,1)
#Vectors of characters
Sebastian = "crab")
bol <- c(TRUE, TRUE, FALSE)
bol
#repeating values
rep1=rep(1,5)
rep1
x <- c(1,2,3,4,5)
pets
char <- c("aa","bb", "cc", "dd")
rep2=rep("a",4)
length(y)
pets <- c(Bolt = "dog", Garfield = "cat",
summary(mariatal.status)
summary(custData.mariatal.status)
summary(custData.marital.status)
summary(marital.status)
install.packages("ggplot2")
library(ggplot2)
help(package=ggplot2)
read.xml("cfb20130831.xml")
xml.read("cfb20130831.xml")
require(XML)
data <- XMLParse("cfb20130831.xml")
package.install("XML")
install.packae("XML")
install.package("XML")
data <- xmlTreeParse("cfb20130831.xml")
install.packages("XML")
data <- xmlTreeParse("cfb20130831.xml")
data <- xmlInternalTreeParse("cfb20130831.xml")
library("XML")
data <- xmlInternalTreeParse("cfb20130831.xml")
data <- xmlTreeParse("cfb20130831.xml")
setwd("D:\\Kyle\\Dropbox\\CS\\CS3654\\R\\HW2")
data <- xmlTreeParse("cfb20130831.xml")
data <- xmlTreeParse("cfb20130831")
data <- xmlTreeParse("cfb20130831",useInternal=TRUE)
data <- xmlTreeParse("cfb20130831.xml",useInternal=TRUE)
data <- xmlToDataFrame("cfb20130831.xml")
url<- "http://www.repole.com/sun4cast/stats/cfb20130907.xml"
myData <- xmlToDataFrame(url)
View(myData)
setwd('C:/Users/Kyle/Dropbox/CS/CS3654/R/Inclass11')
data(mtcars)
head(mtcars)
names(mtcars)
mtcars$response <- mtcars$am > 0
?mtcars
f <- 'response ~ mpg, cyl, disp, hp, drat, wt, qsec, vs, gear, carb'
f
tmodel <- rpart(f,data=mtcars)
library(rpart)
f <- 'response ~ mpg, cyl, disp, hp, drat, wt, qsec, vs, gear, carb'
f
tmodel <- rpart(f,data=mtcars)
?paste
f <- paste('response ~ ',paste(selVars,collapse=' + '),sep='')
f
#Decision trees
setwd('C:/Users/Kyle/Dropbox/CS/CS3654/R/Inclass11')
load('KDD2009.Rdata')
library(rpart)
head(dTrain)
names(dTrain)#training set
#use Churn as the outcome
head(dTrain$churn) # 1 and -1 type variable; 1 is pos outcome
#Decision trees (CART: Classification and Regression Treess)
#problems with Dec trees: too many features; categ features with too many levels;
#too many missing values
#do a preliminary feature selection and feature engineering
#create a new response/classification category variable
#with values 0/1 (False/True)
dTrain$response <- dTrain$churn > 0
head(dTrain$response)
##using the previously selected features (through var selection methods)
#shortcut to create formula
?paste
f <- paste('response ~ ',paste(selVars,collapse=' + '),sep='')
f
setwd('C:/Users/Kyle/Dropbox/CS/CS3654/R/Inclass11')
data(mtcars)
head(mtcars)
names(mtcars)
mtcars$response <- mtcars$am > 0
?mtcars
library(rpart)
f <- 'response ~ mpg + cyl + disp + hp + drat + wt + qsec + vs + gear + carb'
f
tmodel <- rpart(f,data=mtcars)
tmodel
#to visualize tree
install.packages("rpart.plot")
library(rpart.plot)
prp(tmodel)
#another measure of performance :ROC curve and AUC
install.packages('ROCR') #only need to do this once
library(ROCR)
mtcars$pred <- predict(tmodel, newdata = mtcars)
eval <- prediction(mtcars$pred, mtcars$response) #from ROCR package
#calculate AUC
auc_calc <- performance(eval,'auc')
auc_calc@y.values
plot(performance(eval, "tpr", "fpr"))
View(mtcars)
knnTrain <- mtcars
names(knnTrain)
setwd('C:/Users/Kyle/Dropbox/CS/CS3654/R/Inclass11')
data(mtcars)
setwd('C:/Users/Kyle/Dropbox/CS/CS3654/R/Inclass11')
data(mtcars)
head(mtcars)
names(mtcars)
?mtcars
# [, 1]   mpg   Miles/(US) gallon
# [, 2]	 cyl	 Number of cylinders
# [, 3]	 disp	 Displacement (cu.in.)
# [, 4]	 hp	 Gross horsepower
# [, 5]	 drat	 Rear axle ratio
# [, 6]	 wt	 Weight (lb/1000)
# [, 7]	 qsec	 1/4 mile time
# [, 8]	 vs	 V/S
# [, 9]	 am	 Transmission (0 = automatic, 1 = manual)
# [,10]	 gear	 Number of forward gears
# [,11]	 carb	 Number of carburetors
#use pre-selected 27 variables as features
#previous data wrangling and variable selection
knnTrain <- mtcars
names(knnTrain)
#known classes in training set;
#change levels to 0=False=neg class and 1=TRUE=pos class
response <- dTrain$am > 0
response <- mtcars$am > 0
#examine features and classes to know our data
head(response)
head(knnTrain)
dim(knnTrain)
################kNN algo
#package to implement kNN algo
install.packages('class')
library(class)
#use system.time function to time the training of the model
system.time(knnDecision <- knn(knnTrain,knnTrain,response,k=200,prob=T))
?knn
system.time(knnDecision <- knn(knnTrain,knnTrain,response,k=10,prob=T))
head(knnDecision)
knnPred <- ifelse(knnDecision==TRUE,
attributes(knnDecision)$prob,
1-(attributes(knnDecision)$prob))
head(knnPred)
#calculate AUC
library(ROCR)
eval <- prediction(knnPred, response) #from ROCR package
auc_calc <- performance(eval,'auc')
auc_calc@y.values #special object; this is how we extract the exact AUC part
f <- 'response ~ mpg + cyl + disp + hp + drat + wt + qsec + vs + gear + carb' #create formula
system.time(gmodel <- glm(as.formula(f),
data=knnTrain,
family=binomial(link='logit'))) #get system time and train the model
f <- 'response ~ mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb' #create formula
system.time(gmodel <- glm(as.formula(f),
data=knnTrain,
family=binomial(link='logit'))) #get system time and train the model
log_predict <- predict(gmodel,
newdata=knnTrain,
type = "response") #get p predictions
eval <- prediction(log_predict, response) #from ROCR package
auc_calc <- performance(eval,'auc')
auc_calc@y.values #special object; this is how we extract the exact AUC part
###########CART algo
#train CART decision tree, get AUC and system time
library(rpart)
f <- paste('response ~ ',paste(selVars,collapse=' + '),sep='')
f <- 'response ~ mpg + cyl + disp + hp + drat + wt + qsec + vs + am + gear + carb'
system.time(tmodel <- rpart(f,data=dTrain,
system.time(tmodel <- rpart(f,data=mtcars,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5)))
mtcars$pred <- predict(tmodel, newdata = dTrain)
mtcars$pred <- predict(tmodel, newdata = mtcars)
system.time(tmodel <- rpart(f,data=mtcars,
control=rpart.control(cp=0.001,minsplit=1000,
minbucket=1000,maxdepth=5)))
mtcars$pred <- predict(tmodel, newdata = mtcars)
mtcars$response <- mtcars$am > 0
#calculate AUC for CART decision tree
eval <- prediction(dTrain$pred, dTrain$response)
eval <- prediction(mtcars$pred, mtcars$response)
auc_calc <- performance(eval,'auc')
auc_calc@y.values
